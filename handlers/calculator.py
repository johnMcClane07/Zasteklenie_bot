from aiogram import Router
from aiogram.fsm.state import State, StatesGroup
from aiogram import types
from keyboards.userskeyboards import pagination_keyboard, choose_complection_keyboard, choose_extras_keyboard, clear_extras_keyboard,back_to_main_menu
from aiogram import F
import re
from aiogram.fsm.context import FSMContext
from aiogram import exceptions
import logging
from prices import DATA, COMPLECTION_PRICES, COMPLECTIONS, ADDITIONAL_SERVICES, EXTRA_PRICES, BASE_PRICE_PER_M2

router = Router()

class CalculatorState(StatesGroup):
    waiting_for_type = State()
    waiting_for_size = State()
    waiting_for_complectation = State()
    waiting_for_extras = State()


@router.callback_query(lambda c: c.data == 'calculate')
async def calculate(call, state):
    first_item = DATA[0]

    await call.message.answer("‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–∞</b> ‚ú®\n\n", parse_mode="HTML")

    await call.message.answer_photo(
        photo=first_item["file_id"], 
        caption=f"<b>{first_item['name']}</b>",  # –°–¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏—Ä–Ω—ã–º
        reply_markup=pagination_keyboard(1),
        parse_mode="HTML"
    )

    await state.set_state(CalculatorState.waiting_for_type)
    await call.answer()


@router.callback_query(F.data.startswith("page_"))
async def change_page(call: types.CallbackQuery, state: State):
    page = int(call.data.split("_")[1])  
    
    if 1 <= page <= len(DATA):
        data = DATA[page - 1] 
        await call.message.edit_media(
            media=types.InputMediaPhoto(media=data["file_id"], caption=f"<b>{data['name']}</b>", text="‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–∞</b> ‚ú®\n\n", parse_mode="HTML"),
            reply_markup=pagination_keyboard(page),
            parse_mode="HTML"
        )

    await call.answer()


@router.callback_query(F.data.startswith("select_type"))
async def select_window(call: types.CallbackQuery, state: State):
    page = int(call.data.split("_")[2]) 
    data = DATA[page - 1] 

    await state.update_data(window_type=data['name'])

    await state.set_state(CalculatorState.waiting_for_size)
    await call.message.answer("‚ú® <b>–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞</b> ‚ú®\n–ü—Ä–∏–º–µ—Ä: <code>1200x800</code>", parse_mode="HTML")

    await call.answer()


@router.message(CalculatorState.waiting_for_size)
async def calculate_size(message, state):
    user_input = message.text.strip()

    if re.match(r'^\d+[x—Ö]\d+$', user_input, re.IGNORECASE):
        await state.update_data(window_size=user_input) 

        await message.answer("‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é</b> ‚ú®\n\n", parse_mode="HTML")

        await state.set_state(CalculatorState.waiting_for_complectation)

        for i, complection in enumerate(COMPLECTIONS):
            text = f"üí• <b>{complection['name']}</b> üí•\n\n{complection['description']}"
            
            await message.answer(
                text,
                reply_markup=choose_complection_keyboard(i),
                parse_mode="HTML"
            )
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>—à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>100x150</code>).", parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith("select_complection_"))
async def select_complection(call: types.CallbackQuery, state: FSMContext):
    complection_index = int(call.data.split("_")[-1])  
    selected_complection = COMPLECTIONS[complection_index]
    
    await state.update_data(selected_complection=selected_complection)

    await call.message.answer(f"üõí –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—é: <b>{selected_complection['name']}</b>.", parse_mode="HTML")
    await call.answer()

    extras_msg = await call.message.answer(
        "‚ú® <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>",
        reply_markup=choose_extras_keyboard(),
        parse_mode="HTML"
    )

    selected_extras_msg = await call.message.answer("üõí <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)", parse_mode="HTML")

    await state.update_data(
        extras_message_id=extras_msg.message_id,
        selected_extras_message_id=selected_extras_msg.message_id,
        selected_extras=[],  
        last_selected_extras_text="üõí <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)"
    )

    await state.set_state("waiting_for_extras")


@router.callback_query(lambda c: c.data.startswith("select_extra_"))
async def select_extra(call: types.CallbackQuery, state: FSMContext):
    extra_index = call.data.split("_")[-1]
    extra = ADDITIONAL_SERVICES[int(extra_index)]['name']
    logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {extra}")

    user_data = await state.get_data()
    selected_extras = user_data.get("selected_extras", [])

    if extra not in selected_extras:
        selected_extras.append(extra)
        await state.update_data(selected_extras=selected_extras)

    new_extras_text = "üõí <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n" + "\n".join([f"‚Ä¢ {e}" for e in selected_extras])

    selected_extras_msg_id = user_data.get("selected_extras_message_id")
    last_sent_text = user_data.get("last_selected_extras_text", "")

    if selected_extras_msg_id and new_extras_text != last_sent_text:
        try:
            await call.bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=selected_extras_msg_id,
                text=new_extras_text,
                parse_mode="HTML",
                reply_markup=clear_extras_keyboard()
            )

            await state.update_data(last_selected_extras_text=new_extras_text)
        except exceptions.TelegramBadRequest:
            pass  

    await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ!")


@router.callback_query(lambda c: c.data == "clear_extras")
async def clear_extras(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(selected_extras=[], last_selected_extras_text="‚úÖ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)", reply_markup=choose_extras_keyboard())
    await call.bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="‚úÖ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n(–ø–æ–∫–∞ –ø—É—Å—Ç–æ)",
        parse_mode="HTML",
        reply_markup=clear_extras_keyboard()
    )
    await call.answer("–£—Å–ª—É–≥–∏ –æ—á–∏—â–µ–Ω—ã!")


@router.callback_query(lambda c: c.data == "count_cost")
async def calculate_price(call: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()

    window_type = user_data.get("window_type")
    window_size = user_data.get("window_size")
    selected_complection = user_data.get("selected_complection", {})
    selected_extras = user_data.get("selected_extras", [])

    if not window_type or not window_size or not selected_complection:
        await call.message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.", parse_mode="HTML")
        logging.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞!")
        return

    window_size = window_size.lower().replace("—Ö", "x")  # –∑–∞–º–µ–Ω—è–µ–º —Ä—É—Å—Å–∫—É—é "—Ö" –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫—É—é "x"
    width, height = map(int, window_size.split("x"))

    area_m2 = (width / 1000) * (height / 1000)  

    base_price_per_m2 = BASE_PRICE_PER_M2.get(window_type, 0)
    base_cost = area_m2 * base_price_per_m2


    complection_cost = COMPLECTION_PRICES.get(selected_complection["code"], 0)

    extra_cost = sum(EXTRA_PRICES.get(extra["code"], 0) for extra in ADDITIONAL_SERVICES if extra["name"] in selected_extras)

    total_price = base_cost + complection_cost + extra_cost

    price_message = (
        f"‚ú® <b>–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b> ‚ú®\n\n"
        f"üìå <b>–¢–∏–ø –æ–∫–Ω–∞:</b> {window_type}\n"
        f"üìè <b>–†–∞–∑–º–µ—Ä:</b> {window_size} –º–º\n"
        f"üèó <b>–ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è:</b> {selected_complection['name']}\n"
        f"üõ† <b>–î–æ–ø. —É—Å–ª—É–≥–∏:</b> {', '.join(selected_extras) if selected_extras else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {total_price:.2f} ‚ÇΩ"
    )

    await call.message.answer(price_message, reply_markup=back_to_main_menu(), parse_mode="HTML")
    await state.clear()
    await call.answer()
